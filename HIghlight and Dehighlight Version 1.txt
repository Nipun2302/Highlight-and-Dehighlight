var highlighter = {
    selectedElements: [], // [element]
    lastHighlightedElement: null,
    currentX: 0,
    currentY: 0,

    highlight: function(el) {
        if (el._originalBg === undefined)
            el._originalBg = window.getComputedStyle(el).backgroundColor;
        if (el._originalShadow === undefined)
            el._originalShadow = window.getComputedStyle(el).boxShadow;
        el.style.transition = "background-color 0.4s ease, box-shadow 0.4s ease";
        el.style.backgroundColor = "rgba(255, 0, 0, 0.15)";
        el.style.boxShadow = "0 0 0 3px rgb(255, 0, 0) inset";
    },

    deHighlight: function(el) {
        if (!el) return;
        el.style.transition = "background-color 0.4s ease, box-shadow 0.4s ease";
        el.style.backgroundColor = el._originalBg || "";
        el.style.boxShadow = el._originalShadow || "";
    },

    highlightElementAtCoordinates: function(doc, x, y) {
        const currentElement = doc.elementFromPoint(x, y);
        if (!currentElement) return;

        if (highlighter.selectedElements.includes(currentElement)) return;

        if (
            highlighter.lastHighlightedElement &&
            highlighter.lastHighlightedElement !== currentElement &&
            !highlighter.selectedElements.includes(highlighter.lastHighlightedElement)
        ) {
            highlighter.deHighlight(highlighter.lastHighlightedElement);
        }

        highlighter.highlight(currentElement);
        highlighter.lastHighlightedElement = currentElement;
    },

    selectElementOnClick: function(e) {
        const clicked = highlighter.lastHighlightedElement;
        if (!clicked) return;

        // Normal Ctrl+Click selection
        if (e.ctrlKey) {
            if (!highlighter.selectedElements.includes(clicked)) {
                highlighter.selectedElements.push(clicked);
                highlighter.highlight(clicked);
                console.log("Added element:", clicked);
            }
        } else {
            // Non-Ctrl click: check if clicked element shares parent with any already selected element
            const parents = highlighter.selectedElements.map(el => el.parentNode);
            const clickedParent = clicked.parentNode;

            if (parents.includes(clickedParent) && highlighter.selectedElements.length >= 1) {
                // Select all siblings under that parent
                const siblings = Array.from(clickedParent.children).filter(c => c.nodeType === 1);

                highlighter.selectedElements.forEach(el => highlighter.deHighlight(el));
                highlighter.selectedElements = [];

                siblings.forEach(el => {
                    highlighter.selectedElements.push(el);
                    highlighter.highlight(el);
                });

                console.log("Auto-selected all siblings:", highlighter.selectedElements);
            } else {
                // Normal single selection
                highlighter.selectedElements.forEach(el => highlighter.deHighlight(el));
                highlighter.selectedElements = [clicked];
                highlighter.highlight(clicked);
                console.log("Selected element:", clicked);
            }
        }

        console.log("All selected elements:", highlighter.selectedElements);
    },

    attachInspector: function(doc) {
        doc.addEventListener("mousemove", function(e) {
            highlighter.currentX = e.clientX;
            highlighter.currentY = e.clientY;
            highlighter.highlightElementAtCoordinates(doc, highlighter.currentX, highlighter.currentY);
        });

        doc.addEventListener("click", function(e) {
            e.preventDefault();
            e.stopPropagation();
            highlighter.selectElementOnClick(e);
        });

        const iframes = Array.from(doc.getElementsByTagName("iframe"));
        iframes.forEach(iframe => {
            function handleIframeLoad() {
                try {
                    const idoc = iframe.contentDocument;
                    if (idoc) highlighter.attachInspector(idoc);
                } catch (err) {
                    console.warn("Cannot access iframe (probably cross-origin):", iframe.src);
                }
            }

            if (iframe.contentDocument && iframe.contentDocument.readyState === "complete") {
                handleIframeLoad();
            }

            iframe.addEventListener("load", handleIframeLoad);
        });
    }
};

// Initialize
highlighter.attachInspector(document);
